{"meta":{"title":"Xian's Blog","subtitle":"见贤思齐焉，见不贤而内自省也。","description":"见贤思齐焉，见不贤而内自省也。","author":"Xian","url":"http://www.imxian.cn"},"pages":[],"posts":[{"title":"Hexo Github Page配置简介","slug":"20170509","date":"2017-05-09T14:00:00.000Z","updated":"2017-05-09T16:28:50.216Z","comments":true,"path":"2017/05/09/20170509/","link":"","permalink":"http://www.imxian.cn/2017/05/09/20170509/","excerpt":"","text":"参考：https://sfantasy.gitbooks.io/node-in-action/content/zh/http://git.oschina.net/oschina/git-osc/wikis/%E5%B8%AE%E5%8A%A9#ssh-keyshttps://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85https://pages.github.com/ 最近换了一个新机器，所以软件环境需要重新配置例如博客的配置，所以做一个基本的记录，方便日后参考。 1. 安装Node.js安装 Node.js 的最佳方式是使用 nvm。cURL:1curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget:1wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。1nvm install 4 或者您也可以下载 安装程序 来安装。 2. npm配置npm，一般认为是 Node Package Manager 的缩写，鉴于 npm在国内会受到 GFW 的影响，可以选择使用 Taonpm 作为 npm 的镜像，方便安装 npm 中的模块。 配置说明1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装模块从 registry.npm.taobao.org 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPM registry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.1cnpm install [name] 3. Hexo安装1234567$ cnpm install hexo-cli -g$ hexo init blog$ cd blog$ cnpm install$ hexo generate$ hexo clean$ hexo server 4. Git配置123456789# 用户名git config --global user.name &quot;你的名字&quot;# emailgit config --global user.email &quot;你的Email&quot;# 生成SSH Keysssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;# Creates a new ssh key using the provided email# 获取公钥，并复制到公有git库（github,gitoschina,alicode等）cat ~/.ssh/id_rsa.pub 5.Hexo配置安装主题：123hexo cleancd themesgit clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 针对每个主题做具体的配置不赘述。修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为indigo。然后本地预览：123hexo cleanhexo ghexo s 6. 关联Github Pages注册一个github的帐号，创建一个仓库，仓库的名称为username/username.github.io，具体创建过程详见：https://pages.github.com/。修改配置文件_config.xml:1234deploy: type: git repo: https://github.com/byxian/byxian.github.io branch: master 然后发布项目到github上面：1hexo deploy 有常用的域名可以顺带配置一下。在域名管理中对选定的域名进行解析，记录类型为CNAME,记录值为byxian.github.io。然后hexo的source中添加CNAME文件，里面填写域名，重新部署即可实现域名访问。","categories":[],"tags":[]},{"title":"MyBatis Generate使用介绍","slug":"MyBatis Generate使用介绍","date":"2017-04-23T14:00:00.000Z","updated":"2017-05-08T14:43:26.293Z","comments":true,"path":"2017/04/23/MyBatis Generate使用介绍/","link":"","permalink":"http://www.imxian.cn/2017/04/23/MyBatis Generate使用介绍/","excerpt":"","text":"参考文档：http://mbg.cndocs.tk/ 新项目一般都会涉及到数据模型的代码封装工作，一般在进行物理模型出来以后就生成数据表时，需要封装ORM数据层，Hibernate我主要使用JBoss Tools，而Mybatis我使用的是MBG。 此处主要介绍如何将数据库反向工程为项目中的数据层，主要包括model,dao,xml。 image MyBatis Generator (MBG) 可以通过以下方式运行： 从 命令提示符 使用 XML 配置文件 作为 Ant 任务 使用 XML 配置文件 作为 Maven Plugin 从另一个 Java 程序 使用 XML 配置文件 此处我用的是Maven Plugin作为运行方式。 第一步编写pom.xml(参考http://mbg.cndocs.tk/running/runningWithMaven.html） image 第二步创建xml配置文件（xml配置参考http://mbg.cndocs.tk/configreference/xmlconfig.html） image 主要配置参数我做如下简单介绍，详情参考文档：1234567classPathEntry为数据库驱动jar包路径jdbcConnection为数据库连接信息javaModelGenerator配置的是代码model层sqlMapGenerator配置的是代码xml层javaClientGenerator配置的是代码dao层table配置的是需要反向的表列表： tableName数据库表的名称(不包括schema或catalog)。这个元素是&lt;context&gt;元素的一个至少存在一个的必选子元素。 您可以指定不限制数量的table元素。如果需要，指定的值可以包含SQL通配符（通配符参见http://www.w3school.com.cn/sql/sql_wildcards.asp）。 我的工具项目结构: image 第三步使用maven执行任务。 image image 最后生成代码如下（当然一些配置需要完善，后续有空余时间会研究一下xml文件的参数配置）： image demo下载参考","categories":[],"tags":[]},{"title":"技术人员为什么要写博客？","slug":"技术人员为什么要写博客？","date":"2017-04-20T14:00:00.000Z","updated":"2017-05-08T14:43:26.294Z","comments":true,"path":"2017/04/20/技术人员为什么要写博客？/","link":"","permalink":"http://www.imxian.cn/2017/04/20/技术人员为什么要写博客？/","excerpt":"","text":"来源：Zery zhang 的博客 www.cnblogs.com/zery/p/3343893.html 本文只代表个人见解，不代表任立场，如果您认为我的想法是错的那很正常，因为这是我的想法，如果您觉得您的想法和我一样，那我们就是传说中的 “激友”（对生活冲满激情的朋友）。 一、我心中的博客我所以指的写博客，不单只是写一篇文章出来这一结果。而应该是写的这一过程，写过技术文章的朋友应该跟我一样有这么一个过程。 自己了解学习，文章所涉及到的知识点，及知识点衍生出来的知识点。 对学习的知识点进行验证，以确保理论值与实践值保持一致。 动手写，写完后再次检查校正并排版，然后发表。 针对网友的评论中提出的问题进行回复。 我写文章一般都会经历以上5上步，最终以上5步融合成一个结果那就是”一篇文章” 这一过程也是我心中对的”写博客”一词的诠释 二、为什么要写博客为自己写博客对自己的提升是很大的，可能写一篇体现不出来，但是只要你坚持写效果就很明显，好处人个认为有以下几点： 强化知识点： 在写一篇文章前，你必定是要把以文章中心为主的知识点及衍生的知识点都详细了解一篇，在这一过程中必须会涉及到自己以前所了解过的知识，人的记忆是存在记忆曲线的需要不断的重复记忆才能长久的记住某一事物，而每写一篇文章时都会查阅资料，在这一过程中必然会遇到以前记住了而现在渐渐淡忘的知识点，当你再次看到时瞬间就会回想起，此时以前的知识点就得到了强化。 提升学习能力： 同一样的人，了解同一知识点，用不同的方法，产生的结果必然会不一样，找到最佳的学习方法，这也是一种能力，这种能力是经过多次实践探索之后总结出来的，以前我每次需了解某一种技术时都会先百度看各种搜索结果，发现没有想要的之后，再Google因为Google的结果与百度的会有所不同，Google结果中国外的文章相对会多一点，而偶然点了一个链接进入了博客园，发现就是自己想要的东西，而且把概念，代码，及经验都写上去了，看完之后对我帮助很大。 渐渐的我便开始采这种方法了解新知识概念性的直接看百度百科，实质性的直接 上博客园的 找找看 ，群里的朋友还推荐了一种方法，比如我要学MVC 园子里很多人都写了 关于MVC的一系列文章，把那一系列的文章都看一遍，对于MVC就基本有了了解了，这便是学习能力的提升,对于某种技术用最短的时间做到了比较全面的了解 提升文字组织能力： 这个就不用说了，写博客，既然是写，就必然会有大量的文字，而如何组织文字表达出自己想表达的意思，是长期练习的，而写博客正好帮助你提高了你的文字组织能力。 提升逻辑思维能力： 不用说，技术性的东西从来就没的单独存在的，都一层层技术相结合，那在了解某种技术时，自己的思维也是要顺着这种关系逐渐深入的，比如MVC，你不能只知道 M是什么V是什么 C是什么就行了吧，你得知道 M V C 这三者关系是怎样的，又是怎样交互，而你了解之后再把它写出来时，需要清晰逻辑。 为他人有意的：园子里有很多人都写过关于 MVC 框架 WCF 等等系列文章，目的就在于帮助新人快速上手，这个我深有体会，当初我开始学习MVC时就是看的T2噬菌体的MVC系列文章，整篇看完后再配合自己动手对于MVC就有了基本的了解了，在次感谢园子里无私献的大牛们。而以上行为就是有意的帮助。 无意的：很多时候在开发项目的过程中，遇到了技术问题，花了时间解决后，有人会写博客记录，并附上解决方法旨在当再次遇到问题时直接看下文章就知道如何处理了，而碰巧的是，这种问题不止他一个人遇到了。很多人在开发时也遇到了这个问题，在网上找答案时，就找到了这篇文章，并根据文章提供的解决方法，顺利的解决了问题，这种帮助就是无意的帮助。 三、一定要写博客吗古人云：一份耕耘，一份收获。 以下这些是帮助他人而得到的一些认可，并非主观上去追求的。 MVP：微软每年都颁发MVP给那些经常与其他专业人士分享知识和专业技能，受人尊敬、信任，而且平易近人的专家。而这个称号则是对你写的博客质量的肯定。 知名度：文章写得好的人，技术水平肯定也很好，知道的人多了，知名度就有了，比如园子里排名前10的大家都知道，都看过他们的文章。 尊敬：对于技术界的大神，都是受人敬仰的，在园子里或者工作中也是一样的，在心里对大神们都是默默的佩服！至少我是这样啦，哈哈~也是我学习的榜样！ 五、总结我所认的写博客是对自己所了解知识的强化，分享，自身能力的提升。当然 写 博客只是一种方法而以，只要能达到提升自我的效果什么方法都是可以的。 之前有看过一篇文章：《即便没有读者，你也要写博客》 ，其中也讲解了很多写博客的好处。 而我写博客是希望，能提升自己的综合能力，并把自己的知识与经验分享给大家，如果有幸我的分享帮助了一些人，那将使我更加欣慰。 最后附上一句名言：有些事情你现在不去做，可能以后都不会有机会了！ 注：我代表不了大家，所以以上观点只代表我个人。","categories":[],"tags":[]},{"title":"为什么有些技术人员不写博客？","slug":"为什么有些技术人员不写博客？","date":"2017-04-20T13:20:00.000Z","updated":"2017-05-08T14:43:26.294Z","comments":true,"path":"2017/04/20/为什么有些技术人员不写博客？/","link":"","permalink":"http://www.imxian.cn/2017/04/20/为什么有些技术人员不写博客？/","excerpt":"","text":"来源： 伯乐在线 - bigship 常有人跟我讨论我在blog上发布过的博文，有时候他们还希望我来撰写某些文章。在讨论的过程中，我几乎总是会问为什么你自己不开一个博客，或者为其他人的博客做些贡献呢？当我在引导他们为技术类的主题写一些博文时，极少有人对此感兴趣。 我的母亲总是告诉我（以及她的学生们）每个人都有自己的故事。她说，写作可能是一种你不曾想到过的非常有益处的行为，直到你写的东西获得了其他人的喜爱和zan同。就像软件开发者为他们的用户开发软件一样，作家为他们的读者而写作。从来都没有什么论断说技术人员无法成为激励他人学习并乐于同他人分享知识的优秀作者。 我写这篇博文的目的就是想鼓励广大的技术人员去享受写作、高效的写作，并能够从中得到乐趣。我将翻出一些我曾经最常见到的关于为什么技术人员不愿意写博客的理由。 “我不认为我是某方面的专家。对于任何一个我能想到的主题，我都不是权威。”我首先想到的是这个理由，因为它将是我最需要去驳斥的观点。如果从这篇博文里你没有得到任何收获的话，那就记住这句话：你并不需要成为某方面的专家才能去写相关的文章。 翻翻我的博客你就能找到很多这样的例子。我自认为自己是某个方面，或者某两个方面的专家，但我在过去5年中写了超过450篇博文，我肯定不会只写我最在行的那一两个主题。写下你懂得的东西，要成为权威你就不能害怕去多做些研究。这方面有一个很好的例子就是我的一篇标题为“Kerberos for haters”的博文。我几乎没有任何有关Kerberos方面的经验。事实上，甚至在我的RHCA（RedHat系统部署工程师）认证考试中我都无法正确配置好它！但是，我对此做了相当多的研究，并开始慢慢理解了这一大坨东西是如何联系起来的。还有许多人都对Kerberos感到困惑，于是我决定将我所掌握的有关Kerberos方面的知识串接起来写成一篇博文。这篇博文引来了许多正面和负面的回复，很明显我发布的博文对一些读者起到了帮助作用，启发了一些人同时也得罪了一些人。 接下来看看下一个常遇到的理由： 如果我写的东西里面有些地方是错误的怎么办？在整个互联网面前犯错，这使我看起来就像是个傻瓜。这种事我早就经历过，都已经有些厌倦了。做个不恰当的假设，每个作者都至少会犯一次错。读者们会指出你的错误（有些读者会很含蓄的指出，而有些读者不会这样），下面就是你的责任了，要么更正你的大作要么说服你的读者是他们错了。我自己也曾经发表过含有错误的博文，而且我对于时不时的要去检查这些错误显得有些懒惰。就像我中学时的新闻学老师一直教导我的：对于一个错误，最重要的部分是你要如何去更正它，并从中汲取教训。总之，你一定会犯些错误的。只要你尽心尽力的对此做研究，并尽量减少错误，及时对错误做出回应，我想读者是不会怪您的。 说到错误，这里还有一个常见的理由： 我技术还不错，但我的拼写和语法很糟糕，我根本不擅长写作。这个问题很容易解决，如果你是那种什么事情都靠自己解决的人，那就拿起这本由Strunk和White合著的《The Elements of Style | 风格的要素》吧。网上有这本书的PDF版，或者你也可以借一本来读。无论你属于哪种情况，这本书详尽的描述了应该如何适当的加标点符号、如何组织句子和段落，以及如何正确地引用你的论点来源（对于写研究性的文章来说相当受用）。也许你并不想拿起一本如此枯燥的参考书来读，如果是这样的话，看看你身边有没有擅长写作的人。在大公司里你常常能在市场部或者公司的通讯录里找到一些愿意读你的文章并帮你做批注的伙计（谢谢你Garrett！，感谢你曾经为我修订过文章）。在 Fiverr（著名的5美元服务区，这是一个在线的信息平台，特色之处在于其收集那些价值5美元的事情，用户可以发布、接受或者分享这些信息）上我甚至找到了一些愿意以5美元的价格为我修订文章的人。 我不知道该写给谁看。如果我写的东西太简单了，那些真正的技术大牛们会不会觉得我就是个小白？如果我写的东西超级复杂，大多数人都接受不了又怎么办？这些我都经历过。大多数称职的Linux系统管理员都知道该如何添加和删除iptable规则，他们会觉得这是相当简单的任务。但是你知道吗，在我写过的超过450篇的博文里，这篇《deleting a single iptable rule》的访问量每个月都是排名前5！我每个月的点击量里有11%都来自这篇博文。人们要么通过这篇博文学到了一些知识，要么是他们忘记了该如何删除一条iptable规则，想通过这篇博文做快速的参考。不管如何，这篇博文对于许多人来说都是很有价值的，尽管在我看来这个主题相当的简单。反过来说，我曾经发疯写过一个完整的关于云主机冗余配置的how-to类文档，结合了LVS、glusterfs、MySQL on DRBD、memcached、haproxy以及Idirectord等各种技术。我觉得对于某些读者来说这个文档会很有价值，但肯定会搞晕绝大部分读者。事实证明我又错了，这篇博文长期占据我博客的前10名受欢迎的文章之一，通过这篇博文我收到的回复、email和IRC比其他的文章都要多。这再次证明，本是一篇我认为最没有用处的文章反倒成为了一个“话匣子”。 最后，让我们总结一下，如果你对于写作感到力不从心或者觉得气馁的话，记住下面这些忠告： 写你感兴趣的东西，不必在意你是否是专家 不要害怕失败 多多回复你的读者 就算你觉得没人会看你写的东西，也要坚持写下去 始终确保你的文章就代表着你的声音——这也是为什么写作是如此特别和吸引人的地方","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2016-07-27T14:11:30.000Z","updated":"2017-05-08T14:43:26.294Z","comments":true,"path":"2016/07/27/hello-world/","link":"","permalink":"http://www.imxian.cn/2016/07/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}